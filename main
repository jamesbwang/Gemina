import pandas as pd
import os
import urllib3
import certifi

#replace the code below with the pathway to the infections folder
dir=r"C:\Users\WJang\Desktop\Gemina_Project_Pathogens\Gemina_Project_Pathogens\infections"


newdir = os.path.join(dir, 'infections_new')



def reformat():
    #edit the old Gemina database such that the columns are reformated appropriately
    #create new .csv files, print the beginnings of the new csvs, and eliminate the last col. (will use for links to the folder)
    for filename in os.listdir(dir):
        if filename.endswith(".csv"):
            df = pd.read_table(os.path.join(dir, filename), sep="\t", comment="#", names=['index', 'pathogen','source', 'disease', 'tsource', 'ttype', 'portal', 'infection_atts', 'tatts', 'comments'])
            df.reset_index()
            #print(df.head())
            #add all the abstracts of the paper(or html for now)
            addAbstract(df, filename)
            continue
        else:
            continue


def addAbstract(file, fileName):
    #for the column infection_tatts, separate the urls and the PMID's: we will treat these two cases separately.
    k = 0
    for v in file['infection_atts']:
        #find the name in the corresponding pathogen column
        dirname = name = file.iloc[k,1]

        dirname = dirname.replace(' ', '_')
        dirname = dirname.replace(':', ';')
        dirname = dirname.replace('?', '!')
        path = os.path.join(newdir, dirname)
        print(path)
        if not os.path.exists(path):
            os.makedirs(path)
        file.at[k, 'links'] = path

        k+=1
        #print(name)
        if isinstance(v, str):
            addAbstractHelper(v, path)
    filepath = os.path.join(newdir, 'new' + fileName)
    print(filepath)
    file.to_csv(filepath)

def addAbstractHelper(v, path):
    if len(v) == 0:
        return;
        #reformats the URL to a useful for use
    while len(v) > 0:
        if v.startswith('URL:'):
            v = v[4:]
            count = 0
            while count < len(v) and v[count] != ';':
                count+= 1
            j = v[: count]
            v = v[count:]
        #print('\t' + j)

            http = urllib3.PoolManager(cert_reqs='CERT_REQUIRED', ca_certs=certifi.where())

            try:
                r = http.request('GET', j)
            except:
                continue
            j = j.replace('.', '_')
            j = j.replace('/', '-')
            j = j.replace(':', ';')
            j = j.replace('?', '!')
            j = j.replace('&', 'a')
            newpath = os.path.join(path, j + '.html')
            with open(newpath, 'w', encoding='utf-8') as file:
                try:
                    file.write(r.data.decode('utf-8'))
                    file.close()
                except:
                    file.close()


            continue
        if v.startswith('PMID:'):
            v = v[5:]
            count = 0
            while count < len(v) and v[count] != ';':
                count += 1
            j = v[: count]
            v = v[count:]
            http = urllib3.PoolManager(cert_reqs='CERT_REQUIRED', ca_certs=certifi.where())

            try:
                r = http.request('GET', 'https://www.ncbi.nlm.nih.gov/pubmed/?term=' + j)
            except:
                continue
            newpath = os.path.join(path, j + '.html')
            with open(newpath, 'w', encoding='utf-8') as file:
                try:
                    file.write(r.data.decode('utf-8'))
                    file.close()
                except:
                    file.close()
            #print('\t' + j)
            continue

        if v.startswith("toxin="):
            v = v[6:]
            count = 0
            while count < len(v) and v[count] != ';':
                count += 1
            j = v[: count]
            v = v[count:]
            #print('\t' + j)
            newpath = os.path.join(path, "toxins.txt")
            #print(newpath)
            if os.path.isfile(newpath):
                file = open(newpath, "a")
            else:
                file = open(newpath, "w+")
            file.write("toxin:" + j + " ")
            file.close()
            continue
        if v.startswith("symptom="):
            v = v[8:]
            count = 0
            while count < len(v) and v[count] != ';':
                count += 1
            j = v[: count]
            v = v[count:]
            #print('\t' + j)
            newpath = os.path.join(path, "symptoms.txt")
            #print(newpath)
            if os.path.isfile(newpath):
                file = open(newpath, "a")
            else:
                file = open(newpath, "w+")
            file.write("symptom:" + j + " ")
            file.close()
            continue
        else:
            v = v[1:]
            continue


def main():
    reformat()


if __name__=="__main__":
    main()
