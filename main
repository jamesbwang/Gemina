import pandas as pd
import os
import urllib3

#replace the code below with the pathway to the infections folder
dir=r"C:\Users\WJang\Desktop\Gemina_Project_Pathogens\Gemina_Project_Pathogens\infections"


newdir = os.path.join(dir, 'infections_new')

def reformat():
    #edit the old Gemina database such that the columns are reformated appropriately
    #create new .csv files, print the beginnings of the new csvs, and eliminate the last col. (will use for links to the folder)
    for filename in os.listdir(dir):
        if filename.endswith(".csv"):
            df = pd.read_table(os.path.join(dir, filename), sep="\t", comment="#", names=['pathogen','source', 'disease', 'tsource', 'ttype', 'portal', 'infection_atts', 'tatts', 'links'])
            df.to_csv(os.path.join(newdir, 'new' + filename))
            print(df.head())
            df.drop('links', 1)
#            os.remove(os.path.join(dir, filename))
            #add all the abstracts of the paper(or html for now)
            addAbstract(df)
            continue
        else:
            continue


def addAbstract(file):
    #for the column infection_tatts, separate the urls and the PMID's: we will treat these two cases separately.
    k = 0
    for v in file['infection_atts']:
        #find the name in the corresponding pathogen column
        dirname = name = file.iloc[k,0]
        if ':' in name or '/' in name or '*' in name or '?' in name or '<' in name or '>' in name or '|' in name:
            dirname = name[:(len(name) - name.find(':' or '*' or '/' or '?' or '<' or '>' or '|'))*-1]
        dirname = dirname.replace(' ', '_')
        path = os.path.join(newdir, dirname)
        file.iloc[k, 8] = path
        if not os.path.exists(path):
            os.makedirs(path)
        k+=1
        print(name)
        if isinstance(v, str):
            addAbstractHelper(v, path)


def addAbstractHelper(v, path):
    if len(v) == 0:
        return;
        #reformats the URL to a useful form
    if v.startswith('URL:'):
        v = v[4:]
        count = 0
        while count < len(v) and v[count] != ';':
            count+= 1
        j = v[: count]
        v = v[count:]
        print('\t' + j)
        addAbstractHelper(v, path)
        return
    if v.startswith('PMID:'):
        v = v[5:]
        count = 0
        while count < len(v) and v[count] != ';':
            count += 1
        j = v[: count]
        v = v[count:]
        print('\t' + j)
        addAbstractHelper(v, path)
        return
    if v.startswith("toxin="):
        v = v[6:]
        count = 0
        while count < len(v) and v[count] != ';':
            count += 1
        j = v[: count]
        v = v[count:]
        print('\t' + j)
        newpath = os.path.join(path, "toxins.txt")
        print(newpath)
        if os.path.isfile(newpath):
            file = open(newpath, "a")
        else:
            file = open(newpath, "w+")
        file.write("toxin:" + j + " ")
        file.close()
        addAbstractHelper(v, path)
        return
    if v.startswith("symptom="):
        v = v[8:]
        count = 0
        while count < len(v) and v[count] != ';':
            count += 1
        j = v[: count]
        v = v[count:]
        print('\t' + j)
        newpath = os.path.join(path, "symptoms.txt")
        print(newpath)
        if os.path.isfile(newpath):
            file = open(newpath, "a")
        else:
            file = open(newpath, "w+")
        file.write("symptom:" + j + " ")
        file.close()
        addAbstractHelper(v, path)
        return
    else:
        v = v[1:]
        addAbstractHelper(v, path)
        return


def main():
    reformat()


if __name__=="__main__":
    main()
